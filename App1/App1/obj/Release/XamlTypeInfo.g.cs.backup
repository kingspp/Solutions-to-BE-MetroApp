//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace SolutionsToBE
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::SolutionsToBE.Solutions_to_BE_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::SolutionsToBE.Solutions_to_BE_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.String fullName)
        {
            if(_provider == null)
            {
                _provider = new global::SolutionsToBE.Solutions_to_BE_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace SolutionsToBE.Solutions_to_BE_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            string standardName;
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            if(_xamlTypeToStandardName.TryGetValue(type, out standardName))
            {
                xamlType = GetXamlTypeByName(standardName);
            }
            else
            {
                xamlType = GetXamlTypeByName(type.FullName);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (global::System.String.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypes.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            xamlType = CreateXamlType(typeName);
            if (xamlType != null)
            {
                _xamlTypes.Add(typeName, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (global::System.String.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType> _xamlTypes = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();
        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember> _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();
        global::System.Collections.Generic.Dictionary<global::System.Type, string> _xamlTypeToStandardName = new global::System.Collections.Generic.Dictionary<global::System.Type, string>();

        private void AddToMapOfTypeToStandardName(global::System.Type t, global::System.String str)
        {
            if(!_xamlTypeToStandardName.ContainsKey(t))
            {
                _xamlTypeToStandardName.Add(t, str);
            }
        }

        private object Activate_0_LayoutAwarePage() { return new global::SolutionsToBE.Common.LayoutAwarePage(); }

        private object Activate_1_About() { return new global::SolutionsToBE.About(); }

        private object Activate_2_DefinitionDisplay() { return new global::SolutionsToBE.DefinitionDisplay(); }

        private object Activate_3_Reference() { return new global::SolutionsToBE.Reference(); }

        private object Activate_4_Syllabus() { return new global::SolutionsToBE.Syllabus(); }

        private object Activate_5_EquationRipFactor() { return new global::SolutionsToBE.EquationRipFactor(); }

        private object Activate_6_EquationMaxPower() { return new global::SolutionsToBE.EquationMaxPower(); }

        private object Activate_7_EquationDiodeCurrent() { return new global::SolutionsToBE.EquationDiodeCurrent(); }

        private object Activate_8_EquationDiodeVoltage() { return new global::SolutionsToBE.EquationDiodeVoltage(); }

        private object Activate_9_EquationRevRecTime() { return new global::SolutionsToBE.EquationRevRecTime(); }

        private object Activate_10_EquationPower() { return new global::SolutionsToBE.EquationPower(); }

        private object Activate_11_EquationDyResistance() { return new global::SolutionsToBE.EquationDyResistance(); }

        private object Activate_12_EquationFwdVolDrop() { return new global::SolutionsToBE.EquationFwdVolDrop(); }

        private object Activate_13_EquationsMain() { return new global::SolutionsToBE.EquationsMain(); }

        private object Activate_14_Features() { return new global::SolutionsToBE.Features(); }

        private object Activate_15_Credits() { return new global::SolutionsToBE.Credits(); }

        private object Activate_16_FormulaTransistor() { return new global::SolutionsToBE.FormulaTransistor(); }

        private object Activate_17_FormulaFWR() { return new global::SolutionsToBE.FormulaFWR(); }

        private object Activate_18_FormulaHWR() { return new global::SolutionsToBE.FormulaHWR(); }

        private object Activate_19_FormulaDiode() { return new global::SolutionsToBE.FormulaDiode(); }

        private object Activate_20_FormulaMain() { return new global::SolutionsToBE.FormulaMain(); }

        private object Activate_21_EquationTransistor() { return new global::SolutionsToBE.EquationTransistor(); }

        private object Activate_22_definitions() { return new global::SolutionsToBE.definitions(); }

        private object Activate_23_DefinitionList() { return new global::SolutionsToBE.DefinitionList(); }

        private object Activate_24_RectifierFWR() { return new global::SolutionsToBE.RectifierFWR(); }

        private object Activate_25_RectifierHWR() { return new global::SolutionsToBE.RectifierHWR(); }

        private object Activate_26_RectifiersMain() { return new global::SolutionsToBE.RectifiersMain(); }

        private object Activate_27_RectiferBWR() { return new global::SolutionsToBE.RectiferBWR(); }

        private object Activate_28_DefinitionSearch() { return new global::SolutionsToBE.DefinitionSearch(); }

        private object Activate_29_FormulaBWR() { return new global::SolutionsToBE.FormulaBWR(); }

        private object Activate_30_EquationCapacitance() { return new global::SolutionsToBE.EquationCapacitance(); }

        private object Activate_31_MainPage2() { return new global::SolutionsToBE.MainPage2(); }

        private object Activate_32_MainPage() { return new global::SolutionsToBE.MainPage(); }


        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(string typeName)
        {
            global::SolutionsToBE.Solutions_to_BE_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::SolutionsToBE.Solutions_to_BE_XamlTypeInfo.XamlUserType userType;

            switch (typeName)
            {
            case "Windows.UI.Xaml.Controls.Page":
                xamlType = new global::SolutionsToBE.Solutions_to_BE_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Page));
                break;

            case "Windows.UI.Xaml.Controls.UserControl":
                xamlType = new global::SolutionsToBE.Solutions_to_BE_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.UserControl));
                break;

            case "SolutionsToBE.Common.LayoutAwarePage":
                userType = new global::SolutionsToBE.Solutions_to_BE_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::SolutionsToBE.Common.LayoutAwarePage), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_0_LayoutAwarePage;
                xamlType = userType;
                break;

            case "SolutionsToBE.About":
                userType = new global::SolutionsToBE.Solutions_to_BE_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::SolutionsToBE.About), GetXamlTypeByName("SolutionsToBE.Common.LayoutAwarePage"));
                userType.Activator = Activate_1_About;
                xamlType = userType;
                break;

            case "SolutionsToBE.DefinitionDisplay":
                userType = new global::SolutionsToBE.Solutions_to_BE_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::SolutionsToBE.DefinitionDisplay), GetXamlTypeByName("SolutionsToBE.Common.LayoutAwarePage"));
                userType.Activator = Activate_2_DefinitionDisplay;
                xamlType = userType;
                break;

            case "SolutionsToBE.Reference":
                userType = new global::SolutionsToBE.Solutions_to_BE_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::SolutionsToBE.Reference), GetXamlTypeByName("SolutionsToBE.Common.LayoutAwarePage"));
                userType.Activator = Activate_3_Reference;
                xamlType = userType;
                break;

            case "SolutionsToBE.Syllabus":
                userType = new global::SolutionsToBE.Solutions_to_BE_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::SolutionsToBE.Syllabus), GetXamlTypeByName("SolutionsToBE.Common.LayoutAwarePage"));
                userType.Activator = Activate_4_Syllabus;
                xamlType = userType;
                break;

            case "SolutionsToBE.EquationRipFactor":
                userType = new global::SolutionsToBE.Solutions_to_BE_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::SolutionsToBE.EquationRipFactor), GetXamlTypeByName("SolutionsToBE.Common.LayoutAwarePage"));
                userType.Activator = Activate_5_EquationRipFactor;
                xamlType = userType;
                break;

            case "SolutionsToBE.EquationMaxPower":
                userType = new global::SolutionsToBE.Solutions_to_BE_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::SolutionsToBE.EquationMaxPower), GetXamlTypeByName("SolutionsToBE.Common.LayoutAwarePage"));
                userType.Activator = Activate_6_EquationMaxPower;
                xamlType = userType;
                break;

            case "SolutionsToBE.EquationDiodeCurrent":
                userType = new global::SolutionsToBE.Solutions_to_BE_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::SolutionsToBE.EquationDiodeCurrent), GetXamlTypeByName("SolutionsToBE.Common.LayoutAwarePage"));
                userType.Activator = Activate_7_EquationDiodeCurrent;
                xamlType = userType;
                break;

            case "SolutionsToBE.EquationDiodeVoltage":
                userType = new global::SolutionsToBE.Solutions_to_BE_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::SolutionsToBE.EquationDiodeVoltage), GetXamlTypeByName("SolutionsToBE.Common.LayoutAwarePage"));
                userType.Activator = Activate_8_EquationDiodeVoltage;
                xamlType = userType;
                break;

            case "SolutionsToBE.EquationRevRecTime":
                userType = new global::SolutionsToBE.Solutions_to_BE_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::SolutionsToBE.EquationRevRecTime), GetXamlTypeByName("SolutionsToBE.Common.LayoutAwarePage"));
                userType.Activator = Activate_9_EquationRevRecTime;
                xamlType = userType;
                break;

            case "SolutionsToBE.EquationPower":
                userType = new global::SolutionsToBE.Solutions_to_BE_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::SolutionsToBE.EquationPower), GetXamlTypeByName("SolutionsToBE.Common.LayoutAwarePage"));
                userType.Activator = Activate_10_EquationPower;
                xamlType = userType;
                break;

            case "SolutionsToBE.EquationDyResistance":
                userType = new global::SolutionsToBE.Solutions_to_BE_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::SolutionsToBE.EquationDyResistance), GetXamlTypeByName("SolutionsToBE.Common.LayoutAwarePage"));
                userType.Activator = Activate_11_EquationDyResistance;
                xamlType = userType;
                break;

            case "SolutionsToBE.EquationFwdVolDrop":
                userType = new global::SolutionsToBE.Solutions_to_BE_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::SolutionsToBE.EquationFwdVolDrop), GetXamlTypeByName("SolutionsToBE.Common.LayoutAwarePage"));
                userType.Activator = Activate_12_EquationFwdVolDrop;
                xamlType = userType;
                break;

            case "SolutionsToBE.EquationsMain":
                userType = new global::SolutionsToBE.Solutions_to_BE_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::SolutionsToBE.EquationsMain), GetXamlTypeByName("SolutionsToBE.Common.LayoutAwarePage"));
                userType.Activator = Activate_13_EquationsMain;
                xamlType = userType;
                break;

            case "SolutionsToBE.Features":
                userType = new global::SolutionsToBE.Solutions_to_BE_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::SolutionsToBE.Features), GetXamlTypeByName("SolutionsToBE.Common.LayoutAwarePage"));
                userType.Activator = Activate_14_Features;
                xamlType = userType;
                break;

            case "SolutionsToBE.Credits":
                userType = new global::SolutionsToBE.Solutions_to_BE_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::SolutionsToBE.Credits), GetXamlTypeByName("SolutionsToBE.Common.LayoutAwarePage"));
                userType.Activator = Activate_15_Credits;
                xamlType = userType;
                break;

            case "SolutionsToBE.FormulaTransistor":
                userType = new global::SolutionsToBE.Solutions_to_BE_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::SolutionsToBE.FormulaTransistor), GetXamlTypeByName("SolutionsToBE.Common.LayoutAwarePage"));
                userType.Activator = Activate_16_FormulaTransistor;
                xamlType = userType;
                break;

            case "SolutionsToBE.FormulaFWR":
                userType = new global::SolutionsToBE.Solutions_to_BE_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::SolutionsToBE.FormulaFWR), GetXamlTypeByName("SolutionsToBE.Common.LayoutAwarePage"));
                userType.Activator = Activate_17_FormulaFWR;
                xamlType = userType;
                break;

            case "SolutionsToBE.FormulaHWR":
                userType = new global::SolutionsToBE.Solutions_to_BE_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::SolutionsToBE.FormulaHWR), GetXamlTypeByName("SolutionsToBE.Common.LayoutAwarePage"));
                userType.Activator = Activate_18_FormulaHWR;
                xamlType = userType;
                break;

            case "SolutionsToBE.FormulaDiode":
                userType = new global::SolutionsToBE.Solutions_to_BE_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::SolutionsToBE.FormulaDiode), GetXamlTypeByName("SolutionsToBE.Common.LayoutAwarePage"));
                userType.Activator = Activate_19_FormulaDiode;
                xamlType = userType;
                break;

            case "SolutionsToBE.FormulaMain":
                userType = new global::SolutionsToBE.Solutions_to_BE_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::SolutionsToBE.FormulaMain), GetXamlTypeByName("SolutionsToBE.Common.LayoutAwarePage"));
                userType.Activator = Activate_20_FormulaMain;
                xamlType = userType;
                break;

            case "SolutionsToBE.EquationTransistor":
                userType = new global::SolutionsToBE.Solutions_to_BE_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::SolutionsToBE.EquationTransistor), GetXamlTypeByName("SolutionsToBE.Common.LayoutAwarePage"));
                userType.Activator = Activate_21_EquationTransistor;
                xamlType = userType;
                break;

            case "SolutionsToBE.definitions":
                userType = new global::SolutionsToBE.Solutions_to_BE_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::SolutionsToBE.definitions), GetXamlTypeByName("SolutionsToBE.Common.LayoutAwarePage"));
                userType.Activator = Activate_22_definitions;
                xamlType = userType;
                break;

            case "SolutionsToBE.DefinitionList":
                userType = new global::SolutionsToBE.Solutions_to_BE_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::SolutionsToBE.DefinitionList), GetXamlTypeByName("SolutionsToBE.Common.LayoutAwarePage"));
                userType.Activator = Activate_23_DefinitionList;
                xamlType = userType;
                break;

            case "SolutionsToBE.RectifierFWR":
                userType = new global::SolutionsToBE.Solutions_to_BE_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::SolutionsToBE.RectifierFWR), GetXamlTypeByName("SolutionsToBE.Common.LayoutAwarePage"));
                userType.Activator = Activate_24_RectifierFWR;
                xamlType = userType;
                break;

            case "SolutionsToBE.RectifierHWR":
                userType = new global::SolutionsToBE.Solutions_to_BE_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::SolutionsToBE.RectifierHWR), GetXamlTypeByName("SolutionsToBE.Common.LayoutAwarePage"));
                userType.Activator = Activate_25_RectifierHWR;
                xamlType = userType;
                break;

            case "SolutionsToBE.RectifiersMain":
                userType = new global::SolutionsToBE.Solutions_to_BE_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::SolutionsToBE.RectifiersMain), GetXamlTypeByName("SolutionsToBE.Common.LayoutAwarePage"));
                userType.Activator = Activate_26_RectifiersMain;
                xamlType = userType;
                break;

            case "SolutionsToBE.RectiferBWR":
                userType = new global::SolutionsToBE.Solutions_to_BE_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::SolutionsToBE.RectiferBWR), GetXamlTypeByName("SolutionsToBE.Common.LayoutAwarePage"));
                userType.Activator = Activate_27_RectiferBWR;
                xamlType = userType;
                break;

            case "SolutionsToBE.DefinitionSearch":
                userType = new global::SolutionsToBE.Solutions_to_BE_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::SolutionsToBE.DefinitionSearch), GetXamlTypeByName("SolutionsToBE.Common.LayoutAwarePage"));
                userType.Activator = Activate_28_DefinitionSearch;
                xamlType = userType;
                break;

            case "SolutionsToBE.FormulaBWR":
                userType = new global::SolutionsToBE.Solutions_to_BE_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::SolutionsToBE.FormulaBWR), GetXamlTypeByName("SolutionsToBE.Common.LayoutAwarePage"));
                userType.Activator = Activate_29_FormulaBWR;
                xamlType = userType;
                break;

            case "SolutionsToBE.EquationCapacitance":
                userType = new global::SolutionsToBE.Solutions_to_BE_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::SolutionsToBE.EquationCapacitance), GetXamlTypeByName("SolutionsToBE.Common.LayoutAwarePage"));
                userType.Activator = Activate_30_EquationCapacitance;
                xamlType = userType;
                break;

            case "SolutionsToBE.MainPage2":
                userType = new global::SolutionsToBE.Solutions_to_BE_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::SolutionsToBE.MainPage2), GetXamlTypeByName("SolutionsToBE.Common.LayoutAwarePage"));
                userType.Activator = Activate_31_MainPage2;
                xamlType = userType;
                break;

            case "SolutionsToBE.MainPage":
                userType = new global::SolutionsToBE.Solutions_to_BE_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::SolutionsToBE.MainPage), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_32_MainPage;
                xamlType = userType;
                break;

            }
            return xamlType;
        }



        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::SolutionsToBE.Solutions_to_BE_XamlTypeInfo.XamlMember xamlMember = null;
            // No Local Properties
            return xamlMember;
        }

    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(global::System.String input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::SolutionsToBE.Solutions_to_BE_XamlTypeInfo.XamlSystemBaseType
    {
        global::SolutionsToBE.Solutions_to_BE_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::SolutionsToBE.Solutions_to_BE_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public global::System.Object CreateFromString(global::System.String input)
        {
            if (_enumValues != null)
            {
                global::System.Int32 value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    global::System.Int32 enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( global::System.String.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::SolutionsToBE.Solutions_to_BE_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::SolutionsToBE.Solutions_to_BE_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(global::System.String targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


