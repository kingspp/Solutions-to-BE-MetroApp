//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace App1
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::App1.App1_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::App1.App1_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.String fullName)
        {
            if(_provider == null)
            {
                _provider = new global::App1.App1_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace App1.App1_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            string standardName;
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            if(_xamlTypeToStandardName.TryGetValue(type, out standardName))
            {
                xamlType = GetXamlTypeByName(standardName);
            }
            else
            {
                xamlType = GetXamlTypeByName(type.FullName);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (global::System.String.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypes.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            xamlType = CreateXamlType(typeName);
            if (xamlType != null)
            {
                _xamlTypes.Add(typeName, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (global::System.String.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType> _xamlTypes = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();
        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember> _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();
        global::System.Collections.Generic.Dictionary<global::System.Type, string> _xamlTypeToStandardName = new global::System.Collections.Generic.Dictionary<global::System.Type, string>();

        private void AddToMapOfTypeToStandardName(global::System.Type t, global::System.String str)
        {
            if(!_xamlTypeToStandardName.ContainsKey(t))
            {
                _xamlTypeToStandardName.Add(t, str);
            }
        }

        private object Activate_0_LayoutAwarePage() { return new global::App1.Common.LayoutAwarePage(); }

        private object Activate_1_reference() { return new global::App1.reference(); }

        private object Activate_2_syllabus() { return new global::App1.syllabus(); }

        private object Activate_3_Rip() { return new global::App1.Rip(); }

        private object Activate_4_P2() { return new global::App1.P2(); }

        private object Activate_5_If() { return new global::App1.If(); }

        private object Activate_6_dv() { return new global::App1.dv(); }

        private object Activate_7_rev() { return new global::App1.rev(); }

        private object Activate_8_pw() { return new global::App1.pw(); }

        private object Activate_9_rd() { return new global::App1.rd(); }

        private object Activate_10_vf() { return new global::App1.vf(); }

        private object Activate_11_Equationsor() { return new global::App1.Equationsor(); }

        private object Activate_12_features() { return new global::App1.features(); }

        private object Activate_13_Credits() { return new global::App1.Credits(); }

        private object Activate_14_transistore() { return new global::App1.transistore(); }

        private object Activate_15_fwre() { return new global::App1.fwre(); }

        private object Activate_16_hwre() { return new global::App1.hwre(); }

        private object Activate_17_diodem() { return new global::App1.diodem(); }

        private object Activate_18_equations() { return new global::App1.equations(); }

        private object Activate_19_transistorm() { return new global::App1.transistorm(); }

        private object Activate_20_definitions() { return new global::App1.definitions(); }

        private object Activate_21_alpha1() { return new global::App1.alpha1(); }

        private object Activate_22_zenerdiode() { return new global::App1.zenerdiode(); }

        private object Activate_23_typesoffilters() { return new global::App1.typesoffilters(); }

        private object Activate_24_transitioncapacitance() { return new global::App1.transitioncapacitance(); }

        private object Activate_25_transistor() { return new global::App1.transistor(); }

        private object Activate_26_ripplefactor() { return new global::App1.ripplefactor(); }

        private object Activate_27_reverserecoverytime() { return new global::App1.reverserecoverytime(); }

        private object Activate_28_reversebias() { return new global::App1.reversebias(); }

        private object Activate_29_resistor() { return new global::App1.resistor(); }

        private object Activate_30_rectifier() { return new global::App1.rectifier(); }

        private object Activate_31_pnptransistor() { return new global::App1.pnptransistor(); }

        private object Activate_32_peakinversevoltage() { return new global::App1.peakinversevoltage(); }

        private object Activate_33_outputcharacterestics() { return new global::App1.outputcharacterestics(); }

        private object Activate_34_npntransistor() { return new global::App1.npntransistor(); }

        private object Activate_35_inputcharacterestics() { return new global::App1.inputcharacterestics(); }

        private object Activate_36_forwardbias() { return new global::App1.forwardbias(); }

        private object Activate_37_filter() { return new global::App1.filter(); }

        private object Activate_38_diodevoltage() { return new global::App1.diodevoltage(); }

        private object Activate_39_diodecurrent() { return new global::App1.diodecurrent(); }

        private object Activate_40_emittertermional() { return new global::App1.emittertermional(); }

        private object Activate_41_diode() { return new global::App1.diode(); }

        private object Activate_42_diffusioncapacitance() { return new global::App1.diffusioncapacitance(); }

        private object Activate_43_dcloadline() { return new global::App1.dcloadline(); }

        private object Activate_44_def1() { return new global::App1.def1(); }

        private object Activate_45_fwr() { return new global::App1.fwr(); }

        private object Activate_46_hwr() { return new global::App1.hwr(); }

        private object Activate_47_BasicPage2() { return new global::App1.BasicPage2(); }

        private object Activate_48_bwr() { return new global::App1.bwr(); }

        private object Activate_49_BasicPage3() { return new global::App1.BasicPage3(); }

        private object Activate_50_beta() { return new global::App1.beta(); }

        private object Activate_51_capacitor() { return new global::App1.capacitor(); }

        private object Activate_52_collector_terminal() { return new global::App1.collector_terminal(); }

        private object Activate_53_commonbase() { return new global::App1.commonbase(); }

        private object Activate_54_commonemitter() { return new global::App1.commonemitter(); }

        private object Activate_55_commoncollecotr() { return new global::App1.commoncollecotr(); }

        private object Activate_56_baseter() { return new global::App1.baseter(); }

        private object Activate_57_BasicPage4() { return new global::App1.BasicPage4(); }

        private object Activate_58_bwre() { return new global::App1.bwre(); }

        private object Activate_59_ca() { return new global::App1.ca(); }

        private object Activate_60_BasicPage1() { return new global::App1.BasicPage1(); }

        private object Activate_61_MainPage() { return new global::App1.MainPage(); }


        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(string typeName)
        {
            global::App1.App1_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::App1.App1_XamlTypeInfo.XamlUserType userType;

            switch (typeName)
            {
            case "Windows.UI.Xaml.Controls.Page":
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Page));
                break;

            case "Windows.UI.Xaml.Controls.UserControl":
                xamlType = new global::App1.App1_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.UserControl));
                break;

            case "App1.Common.LayoutAwarePage":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.Common.LayoutAwarePage), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_0_LayoutAwarePage;
                xamlType = userType;
                break;

            case "App1.reference":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.reference), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_1_reference;
                xamlType = userType;
                break;

            case "App1.syllabus":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.syllabus), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_2_syllabus;
                xamlType = userType;
                break;

            case "App1.Rip":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.Rip), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_3_Rip;
                xamlType = userType;
                break;

            case "App1.P2":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.P2), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_4_P2;
                xamlType = userType;
                break;

            case "App1.If":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.If), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_5_If;
                xamlType = userType;
                break;

            case "App1.dv":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.dv), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_6_dv;
                xamlType = userType;
                break;

            case "App1.rev":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.rev), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_7_rev;
                xamlType = userType;
                break;

            case "App1.pw":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.pw), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_8_pw;
                xamlType = userType;
                break;

            case "App1.rd":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.rd), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_9_rd;
                xamlType = userType;
                break;

            case "App1.vf":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.vf), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_10_vf;
                xamlType = userType;
                break;

            case "App1.Equationsor":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.Equationsor), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_11_Equationsor;
                xamlType = userType;
                break;

            case "App1.features":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.features), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_12_features;
                xamlType = userType;
                break;

            case "App1.Credits":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.Credits), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_13_Credits;
                xamlType = userType;
                break;

            case "App1.transistore":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.transistore), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_14_transistore;
                xamlType = userType;
                break;

            case "App1.fwre":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.fwre), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_15_fwre;
                xamlType = userType;
                break;

            case "App1.hwre":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.hwre), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_16_hwre;
                xamlType = userType;
                break;

            case "App1.diodem":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.diodem), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_17_diodem;
                xamlType = userType;
                break;

            case "App1.equations":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.equations), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_18_equations;
                xamlType = userType;
                break;

            case "App1.transistorm":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.transistorm), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_19_transistorm;
                xamlType = userType;
                break;

            case "App1.definitions":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.definitions), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_20_definitions;
                xamlType = userType;
                break;

            case "App1.alpha1":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.alpha1), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_21_alpha1;
                xamlType = userType;
                break;

            case "App1.zenerdiode":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.zenerdiode), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_22_zenerdiode;
                xamlType = userType;
                break;

            case "App1.typesoffilters":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.typesoffilters), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_23_typesoffilters;
                xamlType = userType;
                break;

            case "App1.transitioncapacitance":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.transitioncapacitance), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_24_transitioncapacitance;
                xamlType = userType;
                break;

            case "App1.transistor":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.transistor), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_25_transistor;
                xamlType = userType;
                break;

            case "App1.ripplefactor":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.ripplefactor), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_26_ripplefactor;
                xamlType = userType;
                break;

            case "App1.reverserecoverytime":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.reverserecoverytime), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_27_reverserecoverytime;
                xamlType = userType;
                break;

            case "App1.reversebias":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.reversebias), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_28_reversebias;
                xamlType = userType;
                break;

            case "App1.resistor":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.resistor), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_29_resistor;
                xamlType = userType;
                break;

            case "App1.rectifier":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.rectifier), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_30_rectifier;
                xamlType = userType;
                break;

            case "App1.pnptransistor":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.pnptransistor), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_31_pnptransistor;
                xamlType = userType;
                break;

            case "App1.peakinversevoltage":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.peakinversevoltage), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_32_peakinversevoltage;
                xamlType = userType;
                break;

            case "App1.outputcharacterestics":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.outputcharacterestics), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_33_outputcharacterestics;
                xamlType = userType;
                break;

            case "App1.npntransistor":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.npntransistor), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_34_npntransistor;
                xamlType = userType;
                break;

            case "App1.inputcharacterestics":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.inputcharacterestics), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_35_inputcharacterestics;
                xamlType = userType;
                break;

            case "App1.forwardbias":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.forwardbias), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_36_forwardbias;
                xamlType = userType;
                break;

            case "App1.filter":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.filter), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_37_filter;
                xamlType = userType;
                break;

            case "App1.diodevoltage":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.diodevoltage), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_38_diodevoltage;
                xamlType = userType;
                break;

            case "App1.diodecurrent":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.diodecurrent), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_39_diodecurrent;
                xamlType = userType;
                break;

            case "App1.emittertermional":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.emittertermional), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_40_emittertermional;
                xamlType = userType;
                break;

            case "App1.diode":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.diode), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_41_diode;
                xamlType = userType;
                break;

            case "App1.diffusioncapacitance":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.diffusioncapacitance), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_42_diffusioncapacitance;
                xamlType = userType;
                break;

            case "App1.dcloadline":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.dcloadline), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_43_dcloadline;
                xamlType = userType;
                break;

            case "App1.def1":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.def1), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_44_def1;
                xamlType = userType;
                break;

            case "App1.fwr":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.fwr), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_45_fwr;
                xamlType = userType;
                break;

            case "App1.hwr":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.hwr), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_46_hwr;
                xamlType = userType;
                break;

            case "App1.BasicPage2":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.BasicPage2), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_47_BasicPage2;
                xamlType = userType;
                break;

            case "App1.bwr":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.bwr), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_48_bwr;
                xamlType = userType;
                break;

            case "App1.BasicPage3":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.BasicPage3), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_49_BasicPage3;
                xamlType = userType;
                break;

            case "App1.beta":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.beta), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_50_beta;
                xamlType = userType;
                break;

            case "App1.capacitor":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.capacitor), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_51_capacitor;
                xamlType = userType;
                break;

            case "App1.collector_terminal":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.collector_terminal), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_52_collector_terminal;
                xamlType = userType;
                break;

            case "App1.commonbase":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.commonbase), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_53_commonbase;
                xamlType = userType;
                break;

            case "App1.commonemitter":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.commonemitter), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_54_commonemitter;
                xamlType = userType;
                break;

            case "App1.commoncollecotr":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.commoncollecotr), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_55_commoncollecotr;
                xamlType = userType;
                break;

            case "App1.baseter":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.baseter), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_56_baseter;
                xamlType = userType;
                break;

            case "App1.BasicPage4":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.BasicPage4), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_57_BasicPage4;
                xamlType = userType;
                break;

            case "App1.bwre":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.bwre), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_58_bwre;
                xamlType = userType;
                break;

            case "App1.ca":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.ca), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_59_ca;
                xamlType = userType;
                break;

            case "App1.BasicPage1":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.BasicPage1), GetXamlTypeByName("App1.Common.LayoutAwarePage"));
                userType.Activator = Activate_60_BasicPage1;
                xamlType = userType;
                break;

            case "App1.MainPage":
                userType = new global::App1.App1_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::App1.MainPage), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_61_MainPage;
                xamlType = userType;
                break;

            }
            return xamlType;
        }



        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::App1.App1_XamlTypeInfo.XamlMember xamlMember = null;
            // No Local Properties
            return xamlMember;
        }

    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(global::System.String input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::App1.App1_XamlTypeInfo.XamlSystemBaseType
    {
        global::App1.App1_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::App1.App1_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public global::System.Object CreateFromString(global::System.String input)
        {
            if (_enumValues != null)
            {
                global::System.Int32 value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    global::System.Int32 enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( global::System.String.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::App1.App1_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::App1.App1_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(global::System.String targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


